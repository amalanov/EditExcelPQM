PQM {
    programm = (simpleExpression comma)*  simpleExpression
    letInExpression = let programm in rightSide
    simpleExpression = blank* identifier blank* "=" rightSide

    rightSide = blank* (letInExpression | constant | callFunction | identifier | ifthenelse) blank*
    insideif =  blank* (constant | callFunction | identifier ) blank*
        
    constant = numberLiteral | stringLiteral 
    callFunction = identifier blank* "(" (rightSide comma)* rightSide ")"
    ifthenelse = "if" blank+ rightSide (compareSymbols insideif)?  blank+ "then" rightSide "else" rightSide
        
    
    blank = (space | comment)
    comment = multiLineComment | singleLineComment
    multiLineComment = "/*" (~"*/" sourceCharacter)* "*/"
    singleLineComment = "//" (~lineTerminator sourceCharacter)* 

	compareSymbols = blank* ("=" | ">=" | "<=" | ">" | "<" | "==") blank*
    
    numberLiteral  
    = "-"? digit* "." digit+  -- fract
    | digit+             -- whole

    stringLiteral = "\"" doubleStringCharacter* "\""
    doubleStringCharacter = ~("\"" | "\\" | lineTerminator) sourceCharacter 
    lineTerminator = "\n" | "\r" | "\u2028" | "\u2029"  
    sourceCharacter = any
        
    let = "let" blank+
    in = "in" blank+
    identifierHash = "#" (letter | "_")*
    identifierNoHash = ~(reservedWords blank+) (letter | "_")*
    identifier = identifierNoHash | identifierHash
    comma = ","
    
    reservedWords = "let" | "in" | "each" | "if" | "then" | "else" | "try" | "otherwise" 
}
